diff --git a/src/repl/tools.go b/src/repl/tools.go
index 8adfc70..95a9d92 100644
--- a/src/repl/tools.go
+++ b/src/repl/tools.go
@@ -606,7 +606,7 @@ func ProcessUserInput(input string, repl interface{}) string {
 }
 
 // ProcessToolExecution executes tool-based processing for the given input and REPL client
-// This function handles the multi-step, context-aware processing of user input with tools
+// This function handles the adaptive multi-step, context-aware processing of user input with tools
 func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (string, error) {
 	// Type assertion to access REPL methods and fields
 	replImpl, ok := repl.(*REPL)
@@ -618,12 +618,21 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 	// Initialize state tracking variables
 	contextHistory := []string{}
 	stepCount := 0
-	maxSteps := 10 // Add maximum steps to prevent infinite loops
+	maxSteps := 100 // Increased maximum steps to give more room for adaptation
 	var overallPlan string
 	var progress string
 	var lastToolName string
 	repeatCount := 0
-	maxRepeats := 3 // Maximum number of times the same tool can be called consecutively
+	maxRepeats := 5 // Increased maximum repeats to allow for more retries with different approaches
+
+	// Track steps for loop detection
+	lastStepNumber := 0
+	stepStuckCount := 0
+	maxStepStuck := 3 // Increased to allow more attempts before forced progression
+	lastProgressText := ""
+	progressRepeatCount := 0
+	maxProgressRepeats := 1 // Increased to allow more variations in approach
+	noResultCount := 0      // Track consecutive no-result iterations
 
 	for {
 		stepCount++
@@ -633,6 +642,7 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 			fmt.Printf("Exceeded maximum number of steps (%d). Breaking loop to prevent infinite execution.\n\r", maxSteps)
 			break
 		}
+
 		// Construct input with context history
 		toolinput := ProcessUserInput(input, repl)
 
@@ -662,13 +672,35 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 			toolinput += fmt.Sprintf("\n# Current Progress:\n%s\n", progress)
 		}
 
-		trick := "Be concise in your responses, follow the plan and only respond with verified information from the tool calls. Maintain context between steps."
+		// Add step progression reminder to prevent repetitive steps
+		if stepStuckCount > 0 {
+			// toolinput += fmt.Sprintf("\n\n# IMPORTANT REMINDER:\nYou appear to be repeating step %d for %d iterations without progress. You MUST either:\n1. Move to the next step in your plan\n2. Try a completely different approach for this step\n3. Revise your overall plan if the current step is not feasible\n4. Skip this step temporarily if possible and return to it later\nUpdate your Progress field to reflect any changes to your plan.\n", lastStepNumber, stepStuckCount)
+			toolinput += fmt.Sprintf("\n\n# IMPORTANT REMINDER:\nYou appear to be repeating step %d for %d iterations without progress. You MUST either:\n1. Move to the next step in your plan\n2. Revise your overall plan if the current step is not feasible\n3. Skip this step temporarily if possible and return to it later\nUpdate your Progress field to reflect any changes to your plan.\n", lastStepNumber, stepStuckCount)
+		}
+
+		// Add reminder if we're getting no tool results repeatedly
+		if noResultCount > 1 {
+			// toolinput += fmt.Sprintf("\n\n# CRITICAL INSTRUCTION:\nTools are repeatedly returning no results. You MUST change your approach immediately by:\n1. Using a different tool\n2. Modifying your query or parameters significantly\n3. Breaking down the problem differently in your plan\nYour current approach is not working after %d attempts.\n", noResultCount)
+		}
+
+		// trick := "Be concise in your responses and adapt your plan when needed. Only respond with verified information from the tool calls. Maintain context between steps. After completing a step, either move to the next step or adapt your approach if the current one isn't working." //  If a tool returns no result or fails, try a different method."
+		trick := "Be concise in your responses and adapt your plan when needed. Maintain context between steps. After completing a step, either move to the next step or adapt your approach if the current one isn't working." //  If a tool returns no result or fails, try a different method."
 		// Send message with streaming based on REPL settings
+		/*
+		fmt.Println("INPUT")
+		fmt.Println(toolinput)
+		fmt.Println("INPUT")
+		*/
 		messages := []Message{{"user", trick + toolinput}}
 		response, err := client.SendMessage(messages, false)
 		if err != nil {
 			return "", fmt.Errorf("failed to get response for tools: %v", err)
 		}
+		/*
+		fmt.Println("RESPONSE")
+		fmt.Println(response)
+		fmt.Println("RESPONSE")
+		*/
 
 		// Handle the assistant's response based on logging settings
 		if err == nil && response != "" {
@@ -688,6 +720,9 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 				}
 			}
 
+			// Track previous progress text to detect repetition
+			// oldProgress := progress
+
 			progressIdx := strings.Index(response, "Progress: ")
 			if progressIdx != -1 {
 				progressLine := response[progressIdx:]
@@ -697,11 +732,41 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 				}
 			}
 
+			// Check for progress text repetition
+			if progress == lastProgressText {
+				progressRepeatCount++
+				if progressRepeatCount >= maxProgressRepeats {
+					// Force progress by adding explicit instruction
+					toolinput += "\n\n# CRITICAL INSTRUCTION:\nYou MUST move forward in your plan, perform a deeper inspection."
+					fmt.Printf("Progress text repeated %d times. Adding explicit instruction to move forward.\n\r", progressRepeatCount)
+				}
+			} else {
+				progressRepeatCount = 0
+				lastProgressText = progress
+			}
+
+			// Extract current step number from progress
+			currentStepNumber := extractStepNumber(progress)
+			if currentStepNumber > 0 {
+				// Check if we're stuck on the same step
+				if currentStepNumber == lastStepNumber {
+					stepStuckCount++
+					if stepStuckCount >= maxStepStuck {
+						fmt.Printf("Stuck on step %d for %d iterations. Adding reminder to adapt approach.\n\r", currentStepNumber, stepStuckCount)
+					}
+				} else {
+					// We've moved to a new step, reset counters
+					stepStuckCount = 0
+					lastStepNumber = currentStepNumber
+					noResultCount = 0 // Reset no-result counter on step progress
+				}
+			}
+
 			newres, err := executeToolsInMessage(response)
 			if err != nil {
 				errorMsg := fmt.Sprintf("Error executing tool: %v", err)
 				contextHistory = append(contextHistory, errorMsg)
-				input += "\n\n# ToolsError:\n" + err.Error()
+				input += "\n\n# ToolsError:\n" + err.Error() + "\n\nYou must adapt your approach by:\n1. Using a different tool\n2. Modifying your parameters\n3. Revising your current step in the plan"
 				fmt.Printf("Error %v\n\r", err)
 				// Continue with next iteration after error
 				continue
@@ -755,21 +820,34 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 						input += "\n\n# NextStep:\n" + nextStep + "\n----\n"
 						fmt.Printf("Tool requires iteration: %s\n\r", nextStep)
 
+						// Check if nextStep contains step number progression
+						nextStepNumber := extractStepNumber(nextStep)
+						if nextStepNumber > 0 && nextStepNumber <= lastStepNumber {
+							input += fmt.Sprintf("\n\n# IMPORTANT:\nYour NextStep appears to be repeating or going back to step %d. You must progress forward in your plan.\n", nextStepNumber)
+						}
 
-						// Check for repeated tool calls
+						// Check for repeated tool calls but with smarter handling
 						currentToolName := extractToolName(response)
-						fmt.Println("TOOLNAME ")
-						fmt.Println(currentToolName)
-						fmt.Println("TOOLNAME ")
 						if currentToolName != "" && currentToolName == lastToolName {
 							repeatCount++
+
+							// Don't immediately break, first try to guide toward adaptation
+							if repeatCount >= maxRepeats-2 {
+								// Add progressively stronger warnings
+								// input += fmt.Sprintf("\n\n# TOOL REPETITION WARNING:\nYou've used the %s tool %d times in a row with limited progress. Try a completely different tool or approach in your next step.\n", currentToolName, repeatCount)
+								// input += fmt.Sprintf("\n\n# TOOL REPETITION WARNING:\nYou've used the %s tool %d times in a row with limited progress. Try a completely different tool or approach in your next step.\n", currentToolName, repeatCount)
+								fmt.Printf("Tool %s called %d times in a row. Adding warning to change approach.\n\r", currentToolName, repeatCount)
+							}
+
+							// Only break if we've reached the absolute maximum
 							if repeatCount >= maxRepeats {
 								fmt.Printf("Same tool called %d times in a row. Breaking loop to prevent infinite execution.\n\r", repeatCount)
 								goto exitLoop
 							}
 						} else {
-							// Reset counter for new tool
+							// Reset counters for new tool
 							repeatCount = 0
+							noResultCount = 0 // Also reset no-result counter when tool changes
 							lastToolName = currentToolName
 						}
 
@@ -789,8 +867,23 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 					continue
 				}
 			} else {
-				// No result received, but continue iterating
-				fmt.Printf("No tool result, continuing iteration\n\r")
+				// No result received, track this and continue with adaptive approach
+				noResultCount++
+				if noResultCount > 3 {
+					input += fmt.Sprintf("\n\n# Solution\n\n# Reasoning Problem\n\nWe are stuck in finding a better approach to solve the problem. Let's make a guess and respond a solution with the collected data\n")
+					fmt.Printf("No tool result (%d consecutive), resolving\n\r", noResultCount)
+					contextHistory = append(contextHistory, fmt.Sprintf("Do not adapt the plan. Just solve the problem"))
+					continue
+				} else {
+					fmt.Printf("No tool result (%d consecutive), adapting approach\n\r", noResultCount)
+
+					input += fmt.Sprintf("\n\n# ToolsContext:\nThe tool returned no result Make a guess with the available information.")
+				}
+				// Add special instruction for adapting to no-result situation
+				if noResultCount > 1 {
+					contextHistory = append(contextHistory, fmt.Sprintf("No result after %d attempts with current approach. Need to adapt strategy.", noResultCount))
+					//input += fmt.Sprintf("\n\n# ToolsContext:\nThe tool returned no result %d consecutive times. You must try a completely different approach.", noResultCount)
+				}
 				continue
 			}
 		exitLoop:
@@ -810,3 +903,36 @@ func ProcessToolExecution(input string, client *LLMClient, repl interface{}) (st
 
 	return input, nil
 }
+
+// extractStepNumber attempts to extract a step number from text
+// It looks for patterns like "Step X of Y", "Step X/Y", "Step X", etc.
+func extractStepNumber(text string) int {
+	if text == "" {
+		return 0
+	}
+
+	// Try different regex patterns to extract step numbers
+	patterns := []string{
+		`Step\s+(\d+)\s+of\s+\d+`,     // "Step X of Y"
+		`Step\s+(\d+)/\d+`,            // "Step X/Y"
+		`Step\s+(\d+)`,                // "Step X"
+		`step\s+(\d+)`,                // "step X" (lowercase)
+		`on\s+step\s+(\d+)`,           // "on step X"
+		`completing\s+step\s+(\d+)`,   // "completing step X"
+		`completed\s+step\s+(\d+)`,    // "completed step X"
+		`working\s+on\s+step\s+(\d+)`, // "working on step X"
+	}
+
+	for _, pattern := range patterns {
+		re := regexp.MustCompile(pattern)
+		matches := re.FindStringSubmatch(text)
+		if len(matches) >= 2 {
+			stepNumber, err := strconv.Atoi(matches[1])
+			if err == nil {
+				return stepNumber
+			}
+		}
+	}
+
+	return 0
+}
